/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as deskDeskRouteImport } from './routes/(desk)/desk.route'
import { Route as deskDeskIndexImport } from './routes/(desk)/desk.index'
import { Route as deskDeskDeskIdImport } from './routes/(desk)/desk.$deskId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const deskDeskRouteRoute = deskDeskRouteImport.update({
  id: '/(desk)/desk',
  path: '/desk',
  getParentRoute: () => rootRoute,
} as any)

const deskDeskIndexRoute = deskDeskIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => deskDeskRouteRoute,
} as any)

const deskDeskDeskIdRoute = deskDeskDeskIdImport.update({
  id: '/$deskId',
  path: '/$deskId',
  getParentRoute: () => deskDeskRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(desk)/desk': {
      id: '/(desk)/desk'
      path: '/desk'
      fullPath: '/desk'
      preLoaderRoute: typeof deskDeskRouteImport
      parentRoute: typeof rootRoute
    }
    '/(desk)/desk/$deskId': {
      id: '/(desk)/desk/$deskId'
      path: '/$deskId'
      fullPath: '/desk/$deskId'
      preLoaderRoute: typeof deskDeskDeskIdImport
      parentRoute: typeof deskDeskRouteImport
    }
    '/(desk)/desk/': {
      id: '/(desk)/desk/'
      path: '/'
      fullPath: '/desk/'
      preLoaderRoute: typeof deskDeskIndexImport
      parentRoute: typeof deskDeskRouteImport
    }
  }
}

// Create and export the route tree

interface deskDeskRouteRouteChildren {
  deskDeskDeskIdRoute: typeof deskDeskDeskIdRoute
  deskDeskIndexRoute: typeof deskDeskIndexRoute
}

const deskDeskRouteRouteChildren: deskDeskRouteRouteChildren = {
  deskDeskDeskIdRoute: deskDeskDeskIdRoute,
  deskDeskIndexRoute: deskDeskIndexRoute,
}

const deskDeskRouteRouteWithChildren = deskDeskRouteRoute._addFileChildren(
  deskDeskRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/desk': typeof deskDeskRouteRouteWithChildren
  '/desk/$deskId': typeof deskDeskDeskIdRoute
  '/desk/': typeof deskDeskIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/desk/$deskId': typeof deskDeskDeskIdRoute
  '/desk': typeof deskDeskIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(desk)/desk': typeof deskDeskRouteRouteWithChildren
  '/(desk)/desk/$deskId': typeof deskDeskDeskIdRoute
  '/(desk)/desk/': typeof deskDeskIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/desk' | '/desk/$deskId' | '/desk/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/desk/$deskId' | '/desk'
  id:
    | '__root__'
    | '/'
    | '/(desk)/desk'
    | '/(desk)/desk/$deskId'
    | '/(desk)/desk/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  deskDeskRouteRoute: typeof deskDeskRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  deskDeskRouteRoute: deskDeskRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(desk)/desk"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(desk)/desk": {
      "filePath": "(desk)/desk.route.tsx",
      "children": [
        "/(desk)/desk/$deskId",
        "/(desk)/desk/"
      ]
    },
    "/(desk)/desk/$deskId": {
      "filePath": "(desk)/desk.$deskId.tsx",
      "parent": "/(desk)/desk"
    },
    "/(desk)/desk/": {
      "filePath": "(desk)/desk.index.tsx",
      "parent": "/(desk)/desk"
    }
  }
}
ROUTE_MANIFEST_END */
