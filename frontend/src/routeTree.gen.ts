/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as boardBoardImport } from './routes/(board)/board'
import { Route as boardBoardBoardIdImport } from './routes/(board)/board.$boardId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const boardBoardRoute = boardBoardImport.update({
  id: '/(board)/board',
  path: '/board',
  getParentRoute: () => rootRoute,
} as any)

const boardBoardBoardIdRoute = boardBoardBoardIdImport.update({
  id: '/$boardId',
  path: '/$boardId',
  getParentRoute: () => boardBoardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(board)/board': {
      id: '/(board)/board'
      path: '/board'
      fullPath: '/board'
      preLoaderRoute: typeof boardBoardImport
      parentRoute: typeof rootRoute
    }
    '/(board)/board/$boardId': {
      id: '/(board)/board/$boardId'
      path: '/$boardId'
      fullPath: '/board/$boardId'
      preLoaderRoute: typeof boardBoardBoardIdImport
      parentRoute: typeof boardBoardImport
    }
  }
}

// Create and export the route tree

interface boardBoardRouteChildren {
  boardBoardBoardIdRoute: typeof boardBoardBoardIdRoute
}

const boardBoardRouteChildren: boardBoardRouteChildren = {
  boardBoardBoardIdRoute: boardBoardBoardIdRoute,
}

const boardBoardRouteWithChildren = boardBoardRoute._addFileChildren(
  boardBoardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/board': typeof boardBoardRouteWithChildren
  '/board/$boardId': typeof boardBoardBoardIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/board': typeof boardBoardRouteWithChildren
  '/board/$boardId': typeof boardBoardBoardIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(board)/board': typeof boardBoardRouteWithChildren
  '/(board)/board/$boardId': typeof boardBoardBoardIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/board' | '/board/$boardId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/board' | '/board/$boardId'
  id: '__root__' | '/' | '/(board)/board' | '/(board)/board/$boardId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  boardBoardRoute: typeof boardBoardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  boardBoardRoute: boardBoardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(board)/board"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(board)/board": {
      "filePath": "(board)/board.tsx",
      "children": [
        "/(board)/board/$boardId"
      ]
    },
    "/(board)/board/$boardId": {
      "filePath": "(board)/board.$boardId.tsx",
      "parent": "/(board)/board"
    }
  }
}
ROUTE_MANIFEST_END */
